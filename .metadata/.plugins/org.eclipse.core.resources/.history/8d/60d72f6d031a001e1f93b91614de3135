package com.formacionbdi.springboot.app.gateway.filters.factory;

import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.ResponseCookie;
import org.springframework.stereotype.Component;

import reactor.core.publisher.Mono;

@Component
public class EjemploGatewayFilterFactory extends AbstractGatewayFilterFactory<EjemploGatewayFilterFactory.Configuracion>{
		private final Logger logger = LoggerFactory.getLogger(EjemploGatewayFilterFactory.class);
				
			
				
	
	public EjemploGatewayFilterFactory() {
			super(Configuracion.class);
			// TODO Auto-generated constructor stub
		}

	@Override
	public GatewayFilter apply(Configuracion config) {
		
		return (exchange, chain) -> {
			logger.info("Ejecutando pre gateway filter fatory " + config.mensaje);
			return chain.filter(exchange).then(Mono.fromRunnable(() -> {
				Optional.ofNullable(config.coookieValor).ifPresent(cookie -> {
					exchange.getResponse().addCookie(ResponseCookie.from(config.cookieNombre, cookie).build());
				});
				logger.info("Ejecutando post gateway filter fatory " + config.mensaje);
							}));
		};
	}
	
	public static class Configuracion {
		private String mensaje, coookieValor, cookieNombre;

		public String getMensaje() {
			return mensaje;
		}

		public void setMensaje(String mensaje) {
			this.mensaje = mensaje;
		}

		public String getCoookieValor() {
			return coookieValor;
		}

		public void setCoookieValor(String coookieValor) {
			this.coookieValor = coookieValor;
		}

		public String getCookieNombre() {
			return CookieNombre;
		}

		public void setCookieNombre(String cookieNombre) {
			CookieNombre = cookieNombre;
		}  
			}


}
